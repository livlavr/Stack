[x] define dump
[x] rename stack_dump
[x] dump в txt и на каждом действии
[x] проверка хватает ли места для push
[x] проверка размера стэка для pop
[x] ошибка вносится в структуру стэка (в виде двоичного числа)
[] после этого стэкОК прерывает программу и выводит StackError (notinit itc)
[x] canary
[x] canary protection & stack protection
[x] static functions
[x] незначащие нули
[x] check null pointers - MORE ASSERTS
[x] ERROR name
[x] хавать название файла для вывода dump
[x] stackOK не абортит программу
[] repare dump - seg fault if dump not init stack
[x] user can input a file output name
[x] I (dir) - чтобы разделить .h в другую папку
[x] asserts in dumb
[] make dir dumps if its doesnt exist
[x] stack null
[x] dump пиздец
[] пофиксить вывод имени стэка в dump
[x] enum с побитовыми
[] раскидать stackok по функциям
[] say
[] renaming
[x] message
[x] верификатор проверяет error на ошибку и если что вносит туда новую
[x] стэк ресайз проверяет нужно ресайзить или нет(? хз)
[x] ресайз ап и ресайз даун
[] NDEBUG in makefile?
[] макросы чтобы определять где упал стэк, но юзер
может вызвать функцию и отправить туда null null null
[] dump должен учитывать тип stack_elem
[] stackOK зануляет параметр stack->error если не обнаружит ошибок
[x] stack_err_error long int
[] нормальные канарейки
[] asserts doesnt turn down when ndebug mode
[] stackok before dump
[] ull <- int
[] sanitizer проеб памяти
free stack information
free if check_expression
free в месте окончания программы
[] глобальная переменная
[] double init stack stackerr
[] check_expression message
[] colorful stackok
[] ondebug
[] прописать vscode, build и мб еще что-то в gitignore
[x] как нормально реализовать stack_dump, чтобы он не стирал
к хуям собачим файл при инициализации второго стэка с таким же dump_file?
[] gitsub - check_expression, recalloc
[] How can I defence not stack pointer?
[] Hash
